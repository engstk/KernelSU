name: Build KernelSU Manager (ARM64)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-all:
    name: Build ksud + Manager APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Setup tools
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-cleanup: on-success
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: false
        
    # Build ksud daemon
    - name: Build ksud daemon
      working-directory: userspace/ksud
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        export NDK_TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
        export CC_aarch64_linux_android=$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang
        export AR_aarch64_linux_android=$NDK_TOOLCHAIN/bin/llvm-ar
        export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang

        mkdir -p ~/.cargo
        cat > ~/.cargo/config.toml << EOF
        [target.aarch64-linux-android]
        ar = "$NDK_TOOLCHAIN/bin/llvm-ar"
        linker = "$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang"
        
        [env]
        CC_aarch64_linux_android = "$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang"
        AR_aarch64_linux_android = "$NDK_TOOLCHAIN/bin/llvm-ar"
        CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER = "$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang"
        EOF

        cargo build --target aarch64-linux-android --release
        
    # Prepare native libs
    - name: Setup native libraries
      run: |
        mkdir -p manager/app/src/main/jniLibs/arm64-v8a
        cp userspace/ksud/target/aarch64-linux-android/release/ksud manager/app/src/main/jniLibs/arm64-v8a/libksud.so
        chmod 644 manager/app/src/main/jniLibs/arm64-v8a/libksud.so
        
    # Write keystore and gradle.properties in manager
    - name: Setup signing
      working-directory: manager
      run: |
        echo KEYSTORE_PASSWORD='${{ secrets.KEYSTORE_PASSWORD }}' >> gradle.properties
        echo KEY_ALIAS='${{ secrets.KEY_ALIAS }}' >> gradle.properties
        echo KEY_PASSWORD='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
        echo KEYSTORE_FILE='keystore.jks' >> gradle.properties
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > keystore.jks
        chmod 644 keystore.jks
        
    # Build Manager APK
    - name: Build Release APK
      working-directory: manager
      run: ./gradlew assembleRelease
          
    # Upload APK
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Manager-arm64-release
        path: manager/app/build/outputs/apk/release/*.apk
        
    # Cleanup keystore
    - name: Cleanup signing files
      if: always()
      working-directory: manager
      run: rm -f keystore.jks gradle.properties
